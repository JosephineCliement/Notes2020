

  1 ) IDE (Integrated Development Environment)
  
  2 ) Compiler (Translator)  -----> TC (Turbo c) , Mingw, gcc


=======================================================================================================

  Program Structure of C Language



  1) Inclusion section                   
							#include<stdio.h>

  2) Definition section
							#define MAX 5

  3) Global declaration section
							int val=500;
					
  4) function prototype / function declaration
			
							void add();
 
 5) main function definition
							void main() {    add(); //function calling  }

 
 6) function definition
							void add() { }

========================================================================================================

  Create Program in Dev C++ IDE
  Save program                        extension name ( .c )

  Addition.c :   program file / source program / source file / source code

             :   includes english like code ( c programming code )
=======================================================================================================


   Comment :  non executable part of a program

   Type of comments : 1) Single line comment  - To hide a single line from program

				// instruction will not be execute
                            
 

		      2) Multiline comment - To hide multiple lines from program

                               /*  instruction1
                                   instruction2
                                   instruction3

                               */

              Note : - Comments can not be enclosed in other comment    /* /* */ */  invalid

   Use of comment - Makes a program more readable

=========================================================================================================

    
   Statement :   which may end with ; (semicolon)
             :     int x;

====================================================================

   Execution : To run the program

   1) Pre proccessing :
                        Preprocessor statements (starts with # ) are executed 
                        #include < stdio.h > ,  semicolon not required

                        header file : extension (.h) , predefined program

   2) Compilation : 
                      Compiler checks program for syntactical errors like semicolon not found

                     Source program (.c) ---------> compiler ---------> Object code (.obj) in binary form
               
                     Add.c --------> Compiler-----------------> Add.obj

   3) Linking :
                printf();  ------ > stdio.h
                function call (call the function ) -------------------Exceution control--------------------> function definition (Code for function)


   4) Execution :
                   instruction fetched, instruction decoded, operand fetch, instruction execution



===========================================================================================================


 Error : programming mistake

         Type of error : 1) syntax 
					associated with synctical rules ( ; missing ) 
                         2) Linker     
                                        st.h ( header file does not exists )

                         3) Run time
                               
					divide by zero
                         4) Logical
				        (4+2)*2 = 12
                                         4+2*2  = 8
============================================================================================================


  Type of statements 
  
  1) Pre processing  :
                      starts with # , Dont write semicolon ( ; )

  2) Declarative     : 
                      int num;

  3) Executable      :
                  a) Input / output statements :  printf(); ,  scanf();
                  b) Asignment statements      :  = (Assignment Operator) , age = 20;
                  c) Conditional statements    : if...else  , if(condition) 
                  d) Looping statements        : while, do while, for
                  e) Function calling          : add(); , printf();
                  f) Special statements        : break;  , continue;  , exit; , return;

=============================================================================================================

 Keywords : Reserved words

            int,void,float,char, do, while, if

 variables :  named memory location
              changes its value in the program
              int a=30;
		

 identifiers :
              a variable defines the purpose of variable
              int age=30;


 
               numeric variable : int a;
               constants        : #define PI 3.14

               String variable  : char *str;
               String constant  : char *str="Hello";


  Rules to define identifiers :
  
  1) starts with alphabet (year) / alphanumeric ( year2020 )
  2) _ (underscore)
  3) space between variablename not permitted  , firstName (valid), first name (invalid)
  4) variable length depends on compiler.
  5) should not make variable as a keyword name
  6) variable name should not start with numeric

=========================================================================================

 Charateristics of of Good Program

 1) Correctness 
 2) Clarity
 3) Documentation (use of comments)
 4) Indentation 
 5) Robust

=========================================================================================

  main() function :
                   starting point of program from where execution of program happens.
                   Compiler calls main function



  Data type :
               represents type of data a variable can hold

               1) Primitive data type     : predefined
                                                      int, float ,char, double (simple data type)



               2) Non primitive data type : User defined / Structured data type
                                                      Array , Structure, Union


  int x=10;

  char c='D';           // character is represented in single quote '

  float f=1.32;         // Fractional values

  double d=3.1234


  Data type          Size                 signed Range         unsigned 
  
  char  -----------  1 byte               -128 to 127         0 to 255             2 ^ 8 = > 256

  int   -----------  2 / 4 bytes          -32768 to 32767     0 to 65535           2 ^ 16 => 65536

  float -----------  4 bytes                                                       2 ^ 32 => 4294967296

  double ----------  8 bytes                                                       2 ^ 64 => 


  ===================================================================================================

   
   Format String :  is written with %character in " "

   "%d"  ===== integer
   "%f"  ===== float
   "%lf" ===== double
   "%c"  ===== character
                  

  Syntax :

  
    printf("Hello");


    printf("format string",variablename);

================================================

  Add two numbers
   








































































               





 
   